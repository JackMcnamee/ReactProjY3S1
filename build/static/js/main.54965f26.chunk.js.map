{"version":3,"sources":["components/enterBook.js","components/bookItem.js","components/books.js","components/library.js","components/edit.js","App.js","serviceWorker.js","index.js"],"names":["EnterBook","props","state","Title","Author","Summary","Genres","SelectedOption","handleChangeBookTitle","bind","handleChangeBookAuthor","handleChangeBookSummary","handleChangeBookGenres","handleOptionChange","handleSubmit","e","this","setState","target","value","alert","preventDefault","newBook","title","author","summary","genres","selectedOption","axios","post","then","catch","onSubmit","className","type","onChange","rows","checked","React","Component","BookItem","DeleteBook","console","log","delete","book","_id","ReloadDataMethod","style","display","justifyContent","CardDeck","Card","width","Body","Text","ListGroup","ListGroupItem","to","Button","variant","onClick","Books","myBooks","map","key","Library","books","get","response","data","error","movies","Edit","match","params","id","put","App","Navbar","bg","Nav","Link","href","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54965f26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport { newExpression } from '@babel/types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass EnterBook extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { Title: '', Author: '', Summary: '', Genres:'', SelectedOption: '' };\r\n\r\n        this.handleChangeBookTitle = this.handleChangeBookTitle.bind(this);\r\n        this.handleChangeBookAuthor = this.handleChangeBookAuthor.bind(this);\r\n        this.handleChangeBookSummary = this.handleChangeBookSummary.bind(this);\r\n        this.handleChangeBookGenres = this.handleChangeBookGenres.bind(this);\r\n        this.handleOptionChange = this.handleOptionChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangeBookTitle(e) {\r\n        this.setState({ Title: e.target.value });\r\n    }\r\n\r\n    handleChangeBookAuthor(e) {\r\n        this.setState({ Author: e.target.value });\r\n    }\r\n\r\n    handleChangeBookSummary(e) {\r\n        this.setState({ Summary: e.target.value });\r\n    }\r\n\r\n    handleChangeBookGenres(e) {\r\n        this.setState({ Genres: e.target.value});\r\n    }\r\n\r\n    handleOptionChange(e) {\r\n         this.setState({ SelectedOption: e.target.value });\r\n    }\r\n\r\n    // called when submit button is hit\r\n    handleSubmit(e) {\r\n        alert(\"Title: \" + this.state.Title + \"\\nAuthor: \" + this.state.Author + \"\\nSummary: \" + this.state.Summary + \r\n            \"\\nGenres: \" + this.state.Genres + \"\\nOption picked: \" + this.state.SelectedOption);\r\n        e.preventDefault();\r\n\r\n        const newBook = {\r\n            title: this.state.Title,\r\n            author: this.state.Author,\r\n            summary: this.state.Summary, \r\n            genres: this.state.Genres,\r\n            selectedOption : this.state.SelectedOption\r\n        }; \r\n\r\n        axios.post('http://localhost:4000/api/books',newBook) \r\n          .then()\r\n          .catch();\r\n\r\n        this.setState({\r\n            Title: '',\r\n            Author: '',\r\n            Summary: '',\r\n            Genres: '',\r\n            SelectedOption: ''\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>Please Enter the Books Details</h2>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {/* Enter book details (name, author, summary) */}\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Book Title:\r\n                        </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.Title} onChange={this.handleChangeBookTitle}/>\r\n                    </div> {/* title */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Author:\r\n                        </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.Author} onChange={this.handleChangeBookAuthor}/>\r\n                    </div> {/* author */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Book Summary:\r\n                        </label>\r\n                        <textarea className=\"form-control\" rows=\"6\" value={this.state.Summary} onChange={this.handleChangeBookSummary}/>\r\n                    </div> {/* summary */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Genres:\r\n                        </label>\r\n                        <textarea className=\"form-control\" rows=\"6\" value={this.state.Genres} onChange={this.handleChangeBookGenres}/>\r\n                    </div> {/* genres */}\r\n\r\n                    {/* select category the book is in (finished, reading, will read) */}\r\n                    <div className = \"radio\">\r\n                        <p>\r\n                            Select Category Book Belongs to:\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Finished\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Finished\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Finished reading this Book\r\n                        </label>\r\n                    </div> {/* finished */}\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Reading\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Reading\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Currently reading this Book\r\n                        </label>\r\n                    </div> {/* reading */}\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Will Read\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Will Read\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Will read this Book\r\n                        </label>\r\n                    </div> {/* will read */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <input type=\"submit\" value=\"Submit\"/>\r\n                    </div> {/* submit */}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EnterBook;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass BookItem extends React.Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.DeleteBook = this.DeleteBook.bind(this);\r\n  }\r\n\r\n  DeleteBook(e){\r\n    console.log(\"Delete Clicked\");\r\n    axios.delete(\"http://localhost:4000/api/books/\"+this.props.book._id)\r\n    .then(()=>{\r\n      this.props.ReloadDataMethod();\r\n    })\r\n    .catch();\r\n  }\r\n\r\n  render(){\r\n      return(\r\n          \r\n          <div style={{display: 'flex',  justifyContent:'center'}}>\r\n            <br  />\r\n              {/* layout for books entered by user */}\r\n              <CardDeck>\r\n                <Card style={{ width: '30rem' }}>\r\n                  <Card.Body>\r\n                    <Card.Title>{this.props.book.title} by {this.props.book.author}</Card.Title>\r\n                    <Card.Text>{this.props.book.summary}</Card.Text>\r\n                  </Card.Body>\r\n                  <ListGroup className=\"list-group-flush\">\r\n                    <ListGroupItem>Genres: {this.props.book.genres}</ListGroupItem>\r\n                    <ListGroupItem>{this.props.book.selectedOption}</ListGroupItem>\r\n                  </ListGroup>\r\n                  <Card.Body>\r\n                    <Link to={\"/edit/\" + this.props.book._id} className=\"btn btn-primary\">Edit</Link> \r\n                    <Button variant=\"danger\" onClick={this.DeleteBook}>Delete</Button> \r\n                  </Card.Body>\r\n                </Card>\r\n              </CardDeck> \r\n              <br  />\r\n              <br  />\r\n\r\n          </div>\r\n      )\r\n  }\r\n}\r\nexport default BookItem;","import React from 'react';\r\nimport BookItem from './bookItem';\r\n\r\nclass Books extends React.Component{\r\n\r\n    render(){\r\n        return this.props.myBooks.map((book)=>{\r\n            return <BookItem key={book._id} book={book}\r\n            ReloadDataMethod={this.props.ReloadDataMethod}></BookItem>\r\n        });\r\n    }\r\n}\r\nexport default Books;","import React from 'react';\r\nimport Books from './books';\r\nimport axios from 'axios';\r\n\r\nclass Library extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.ReloadDataMethod = this.ReloadDataMethod.bind(this);\r\n    }\r\n\r\n    state = {\r\n        books: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/api/books')\r\n        .then((response)=>{\r\n            this.setState({books: response.data.books})\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    ReloadDataMethod(){\r\n        axios.get('http://localhost:4000/api/books')\r\n        .then((response)=>{\r\n            this.setState({movies: response.data.books})\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>Your Library</h2>\r\n                {/* outputs books */}\r\n                <Books myBooks={this.state.books}\r\n                ReloadDataMethod={this.ReloadDataMethod}></Books>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\nexport default Library;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Edit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { Title: '', Author: '', Summary: '', Genres:'', SelectedOption: '', _id:'' };\r\n\r\n        this.handleChangeBookTitle = this.handleChangeBookTitle.bind(this);\r\n        this.handleChangeBookAuthor = this.handleChangeBookAuthor.bind(this);\r\n        this.handleChangeBookSummary = this.handleChangeBookSummary.bind(this);\r\n        this.handleChangeBookGenres = this.handleChangeBookGenres.bind(this);\r\n        this.handleOptionChange = this.handleOptionChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // listening for a get request in server.js\r\n        //alert(this.props.match.params.id);\r\n        axios.get(\"http://localhost:4000/api/books/\" + this.props.match.params.id)\r\n        .then((response) =>{\r\n            this.setState({\r\n                _id:response.data._id,\r\n                Title:response.data.title,\r\n                Author:response.data.author,\r\n                Summary:response.data.summary,\r\n                Genres:response.data.genres,\r\n                SelectedOption:response.data.selectedOption\r\n            })\r\n        })\r\n        .catch();\r\n    }\r\n\r\n    handleChangeBookTitle(e) {\r\n        this.setState({ Title: e.target.value });\r\n    }\r\n\r\n    handleChangeBookAuthor(e) {\r\n        this.setState({ Author: e.target.value });\r\n    }\r\n\r\n    handleChangeBookSummary(e) {\r\n        this.setState({ Summary: e.target.value });\r\n    }\r\n\r\n    handleChangeBookGenres(e) {\r\n        this.setState({ Genres: e.target.value});\r\n    }\r\n\r\n    handleOptionChange(e) {\r\n         this.setState({ SelectedOption: e.target.value });\r\n    }\r\n\r\n    // called when submit button is hit\r\n    handleSubmit(e) {\r\n        alert('Title: ' + this.state.Title + \"\\nAuthor: \" + this.state.Author + \"\\nSummary: \" + this.state.Summary + \r\n        \"\\nGenres: \" + this.state.Genres + \"\\nOption picked: \" + this.state.SelectedOption);\r\n        e.preventDefault();\r\n\r\n        const newBook = {\r\n            title: this.state.Title,\r\n            author: this.state.Author,\r\n            summary: this.state.Summary, \r\n            genres: this.state.Genres,\r\n            selectedOption : this.state.SelectedOption\r\n        }; \r\n\r\n        axios.put('http://localhost:4000/api/books/' + this.state._id, newBook) \r\n          .then()\r\n          .catch();\r\n\r\n        this.setState({\r\n            Title: '',\r\n            Author: '',\r\n            Summary: '',\r\n            Genres: '',\r\n            SelectedOption: ''\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Please Edit your Book</h2>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {/* Enter book details (name, author, summary) */}\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Book Title:\r\n                        </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.Title} onChange={this.handleChangeBookTitle}/>\r\n                    </div> {/* title */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Author:\r\n                        </label>\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.Author} onChange={this.handleChangeBookAuthor}/>\r\n                    </div> {/* author */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Book Summary:\r\n                        </label>\r\n                        <textarea className=\"form-control\" rows=\"6\" value={this.state.Summary} onChange={this.handleChangeBookSummary}/>\r\n                    </div> {/* summary */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <label>\r\n                            Genres:\r\n                        </label>\r\n                        <textarea className=\"form-control\" rows=\"6\" value={this.state.Genres} onChange={this.handleChangeBookGenres}/>\r\n                    </div> {/* genres */}\r\n\r\n                    {/* select category the book is in (finished, reading, will read) */}\r\n                    <div className = \"form-group\">\r\n                        <p>\r\n                            Select Category Book Belongs to:\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Finished\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Finished\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Books Read\r\n                        </label>\r\n                    </div> {/* finished */}\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Reading\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Reading\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Books Reading\r\n                        </label>\r\n                    </div> {/* reading */}\r\n\r\n                    <div className=\"radio\">\r\n                        <label>\r\n                            <input type=\"radio\" value=\"Will Read\" className=\"form-control\"\r\n                                checked={this.state.SelectedOption === \"Will Read\"}\r\n                                onChange={this.handleOptionChange}/>\r\n                            Books Will Read\r\n                        </label>\r\n                    </div> {/* will read */}\r\n\r\n                    <div className = \"form-group\">\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n                    </div> {/* submit */}\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Edit;","import React from 'react';\nimport './App.css';\nimport EnterBook from './components/enterBook';\nimport Library from './components/library';\nimport Edit from './components/edit';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <Router>\n        <div className = \"App\">\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/enterBook\">Enter Book</Nav.Link>\n              <Nav.Link href=\"/library\">Your Library</Nav.Link>\n            </Nav>\n          </Navbar>\n\n          <Switch>\n            <Route path=\"/enterBook\" component={EnterBook}/>\n            <Route path=\"/library\" component={Library}/>\n            <Route path=\"/edit/:id\" component={Edit} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}